/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.2.22.v20170606
 * Generated at: 2018-03-20 06:35:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

	String path = request.getContextPath();

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("\n");
      out.write("<html lang=\"zh-CN\">\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("    <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->\n");
      out.write("\t<meta name=\"keywords\" content=\"SpringMVC,过滤器,拦截器,加载到内存,Filter,HandlerInterceptor,ApplicationContextAware,java\">\n");
      out.write("    <title></title>\n");
      out.write("\n");
      out.write("    <!-- Bootstrap -->\n");
      out.write("    <link href=\"");
      out.print(path);
      out.write("/assets/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("    \n");
      out.write("    <!-- 自定义css -->\n");
      out.write("    <link href=\"");
      out.print(path);
      out.write("/assets/css/css1.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n");
      out.write("    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n");
      out.write("    <!--[if lt IE 9]>\n");
      out.write("      <script src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n");
      out.write("      <script src=\"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js\"></script>\n");
      out.write("    <![endif]-->\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("  \t<div class=\"container\">\n");
      out.write("  \t\t<div class=\"row\">\n");
      out.write("  \t\t\t<div class=\"col-md-8\">\n");
      out.write("  \t\t\t\t<div style=\"margin-top:50px;\"></div>\n");
      out.write("  \t\t\t\t<ul class=\"list-unstyled\">\n");
      out.write("  \t\t\t\t\t<li><h2>示例一 拦截器 HandlerInterceptor</h2></li>\n");
      out.write("  \t\t\t\t\t\n");
      out.write("  \t\t\t\t\t<li>示例中当访问路径\n");
      out.write("\t\t\t\t\t\t<a href=\"http://www.itluosiding.com/filter_interceptor_loadmemory/time/timeindex\">\n");
      out.write("\t\t\t\t\t\t\thttp://www.itluosiding.com/filter_interceptor_loadmemory/time/timeindex</a>\n");
      out.write("  \t\t\t\t\t</li>\n");
      out.write("  \t\t\t\t\t<li>\n");
      out.write("  \t\t\t\t\t\t拦截器对路径下/time/*进行拦截，如果时间在上午11点到下午15点之间，可以顺利访问上面的路径，\n");
      out.write("  \t\t\t\t\t</li>\n");
      out.write("  \t\t\t\t\t<li>\n");
      out.write("  \t\t\t\t\t\t否则跳转到http://www.itluosiding.com/filter_interceptor_loadmemory/noflowthrow页面\n");
      out.write("  \t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t访问非/time/路径下的链接，比如\n");
      out.write("\t\t\t\t\t<a href=\"http://www.itluosiding.com/filter_interceptor_loadmemory/noflowthrow\">http://www.itluosiding.com/filter_interceptor_loadmemory/noflowthrow</a>\n");
      out.write("\t\t\t\t\t将不会受拦截器的任何影响\n");
      out.write("\t\t\t\t\t</li>\t\n");
      out.write("  \t\t\t\t</ul>\n");
      out.write("  \t\t\t\t\n");
      out.write("  \t\t\t\t<ul class=\"list-unstyled\">\n");
      out.write("  \t\t\t\t\t<li><h2>示例二 过滤器 Filter</h2></li>\n");
      out.write("  \t\t\t\t\t<li>\n");
      out.write("  \t\t\t\t\t\t示例中当访问路径\n");
      out.write("\t\t\t\t\t<a href=\"http://www.itluosiding.com/filter_interceptor_loadmemory/manager/flowthrow\">\n");
      out.write("\t\t\t\t\t\thttp://www.itluosiding.com/filter_interceptor_loadmemory/manager/flowthrow</a>\n");
      out.write("  \t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t过滤器对路径下/manager/*进行拦截，后台会打印出流经拦截器中方法doFilter的信息\n");
      out.write("\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t访问非/manager/路径下的链接，比如\n");
      out.write("\t\t\t\t\t\t<a href=\"http://www.itluosiding.com/filter_interceptor_loadmemory/noflowthrow\">http://www.itluosiding.com/filter_interceptor_loadmemory/noflowthrow</a>\n");
      out.write("\t\t\t\t\t\t将不会受过滤器的任何影响\n");
      out.write("\t\t\t\t\t</li>\n");
      out.write("  \t\t\t\t</ul>\n");
      out.write("\n");
      out.write("\n");
      out.write("  \t\t\t\t<ul class=\"list-unstyled\">\n");
      out.write("  \t\t\t\t\t<li><h2>示例三 加载内存数据 ApplicationContextAware</h2></li>\n");
      out.write("  \t\t\t\t\t<li>应用启动时，会把测试数据加载到内存中</li>\n");
      out.write("  \t\t\t\t\t<li>\n");
      out.write("  \t\t\t\t\t\t当访问\n");
      out.write("\t\t\t\t\t<a href=\"http://www.itluosiding.com/filter_interceptor_loadmemory/loadmemory\">\n");
      out.write("\t\t\t\t\t\thttp://www.itluosiding.com/filter_interceptor_loadmemory/loadmemory</a>\n");
      out.write("\t\t\t\t\t\t时，页面会显示从内存中加载的数据\n");
      out.write("  \t\t\t\t\t</li>\n");
      out.write("  \t\t\t\t</ul>\n");
      out.write("  \t\t\t\t\n");
      out.write("  \t\t\t</div>\n");
      out.write("  \t\t\t<div class=\"col-md-4\"></div>\n");
      out.write("  \t\t</div>\n");
      out.write("  \t</div>\n");
      out.write("  \t\n");
      out.write("\n");
      out.write("    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n");
      out.write("    <script src=\"");
      out.print(path);
      out.write("/assets/js/jquery.min.js\"></script>\n");
      out.write("    <!-- Include all compiled plugins (below), or include individual files as needed -->\n");
      out.write("    <script src=\"");
      out.print(path);
      out.write("/assets/js/bootstrap.min.js\"></script>\n");
      out.write("  </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
